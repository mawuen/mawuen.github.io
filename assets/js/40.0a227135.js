(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{490:function(e,t,a){"use strict";a.r(t);var r=a(7),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"git-s-cheat-sheet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-s-cheat-sheet"}},[e._v("#")]),e._v(" Git's cheat sheet")]),e._v(" "),a("p",[e._v("A highly opinionated "),a("a",{attrs:{href:"http://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git"),a("OutboundLink")],1),e._v(" cheat sheet:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#general"}},[e._v("General")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#branches"}},[e._v("Branches")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#tags"}},[e._v("Tags")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#stashes"}},[e._v("Stashes")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#remotes"}},[e._v("Remotes")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#reverts"}},[e._v("Reverts")])])]),e._v(" "),a("p",[e._v("Take a look at the "),a("RouterLink",{attrs:{to:"/git/tips.html"}},[e._v("Git tips")]),e._v(".")],1),e._v(" "),a("h2",{attrs:{id:"general"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#general"}},[e._v("#")]),e._v(" General")]),e._v(" "),a("ul",[a("li",[e._v("cloning and switching to branch: "),a("code",[e._v("git clone <repository> -b <branch-name>")])])]),e._v(" "),a("h2",{attrs:{id:"branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[e._v("#")]),e._v(" Branches")]),e._v(" "),a("ul",[a("li",[e._v("listing existing branches: "),a("code",[e._v("git branch -avv")])]),e._v(" "),a("li",[e._v("creating a new branch and switching to it: "),a("code",[e._v("git checkout -b <branch-name>")])]),e._v(" "),a("li",[e._v("creating a branch from a remote one and track it: "),a("code",[e._v("git checkout -t <remote>/<branch-name>")])]),e._v(" "),a("li",[e._v("pushing the branch and tracking it: "),a("code",[e._v("git push -u <remote> <branch-name>")])]),e._v(" "),a("li",[e._v("removing the remote branch: "),a("code",[e._v("git push <remote> :<branch-name>")]),e._v(" (note the "),a("code",[e._v(":")]),e._v(" before the branch name)")]),e._v(" "),a("li",[e._v("removing a local branch: "),a("code",[e._v("git branch -d <branch-name>")]),e._v(" (won't remove unmerged branches)")]),e._v(" "),a("li",[e._v("removing both local and remote branches: "),a("code",[e._v("git branch -rd <branch-name>")])]),e._v(" "),a("li",[e._v("removing branches that doesn't exist anymore on the repository: "),a("code",[e._v("git fetch -p")])]),e._v(" "),a("li",[e._v("renaming a branch: "),a("code",[e._v("git branch -m <current-branch-name> <new-branch-name>")])]),e._v(" "),a("li",[e._v("finding unmerged branches: "),a("code",[e._v("git banch --no-merged")])]),e._v(" "),a("li",[e._v("switching to a branch: "),a("code",[e._v("git checkout <branch-name>")])])]),e._v(" "),a("h2",{attrs:{id:"tags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tags"}},[e._v("#")]),e._v(" Tags")]),e._v(" "),a("ul",[a("li",[e._v("listing existing tags with the message: "),a("code",[e._v("git tag -n<number-of-lines>")])]),e._v(" "),a("li",[e._v("creating a new tag: "),a("code",[e._v("git tag -a <tag-name> -m '<message>'")])]),e._v(" "),a("li",[e._v("pushing the tag: "),a("code",[e._v("git push <remote> <tag-name>")])]),e._v(" "),a("li",[e._v("removing a remote tag: "),a("code",[e._v("git push <remote> :<tag-name>")]),e._v(" (note the "),a("code",[e._v(":")]),e._v(" before the tag name)")]),e._v(" "),a("li",[e._v("removing a local tag: "),a("code",[e._v("git tag -d <tag-name>")])]),e._v(" "),a("li",[e._v("renaming a tag: "),a("code",[e._v("git tag <old-tag-name> <new-tag-name>; git -d <old-tag-name>")])]),e._v(" "),a("li",[e._v("changing the tag's commit to the current one: "),a("code",[e._v("git tag -f <tag-name> <commit-hash>")])])]),e._v(" "),a("h2",{attrs:{id:"stashes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stashes"}},[e._v("#")]),e._v(" Stashes")]),e._v(" "),a("ul",[a("li",[e._v("listing stashes: "),a("code",[e._v("git stash list")])]),e._v(" "),a("li",[e._v("creating a new stash: "),a("code",[e._v("git stash [save '<description>']")])]),e._v(" "),a("li",[e._v("applying the stash and remove it: "),a("code",[e._v("git stash pop <stash>")])]),e._v(" "),a("li",[e._v("removing all stashes: "),a("code",[e._v("git stash clear")])]),e._v(" "),a("li",[e._v("removing the stash: "),a("code",[e._v("git stash drop <stash>")])])]),e._v(" "),a("h3",{attrs:{id:"the-stash-argument"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-stash-argument"}},[e._v("#")]),e._v(" The "),a("code",[e._v("<stash>")]),e._v(" argument")]),e._v(" "),a("ul",[a("li",[e._v("refering to a stash by its number: "),a("code",[e._v("stash@{<number>}")])]),e._v(" "),a("li",[e._v("most recent stash: "),a("code",[e._v("stash@{0}")])]),e._v(" "),a("li",[e._v("when ommiting the "),a("code",[e._v("<stash>")]),e._v(" argument, "),a("code",[e._v("stash@{0}")]),e._v(" is assumed")])]),e._v(" "),a("p",[e._v("References: "),a("a",{attrs:{href:"http://gitready.com/beginner/2009/03/13/smartly-save-stashes.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("git ready"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"remotes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remotes"}},[e._v("#")]),e._v(" Remotes")]),e._v(" "),a("ul",[a("li",[e._v("listing existing remotes: "),a("code",[e._v("git remote -v")])]),e._v(" "),a("li",[e._v("adding one: "),a("code",[e._v("git remote add <remote-name> <repository-url>")])]),e._v(" "),a("li",[e._v("removing one: "),a("code",[e._v("git remote rm <remote-name>")])]),e._v(" "),a("li",[e._v("renaming one: "),a("code",[e._v("git remote <current-remote-name> <new-remote-name>")])]),e._v(" "),a("li",[e._v("showing one: "),a("code",[e._v("git remote show <remote-name>")])]),e._v(" "),a("li",[e._v("changing URL: "),a("code",[e._v("git remote set-url <remote-name> <new-repository-url>")])])]),e._v(" "),a("h3",{attrs:{id:"common-remote-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-remote-names"}},[e._v("#")]),e._v(" Common remote names")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("origin")]),e._v(": default name of the cloned repository")]),e._v(" "),a("li",[a("code",[e._v("upstream")]),e._v(": name of the original repository (used when your repository is a fork)")])]),e._v(" "),a("h2",{attrs:{id:"reverts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reverts"}},[e._v("#")]),e._v(" Reverts")]),e._v(" "),a("p",[e._v("Create a new commit which undo a previous one.")]),e._v(" "),a("ul",[a("li",[e._v("reverting a commit: "),a("code",[e._v("git revert <commit-hash>")])]),e._v(" "),a("li",[e._v("reverting a merge: "),a("code",[e._v("git revert -m 1 <merge-commit-hash>")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);